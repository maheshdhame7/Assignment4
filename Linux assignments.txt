1	Write a shell script which will generate the O/P as follows

*
**
***
****

ANS-->

#!/bin/bash

# Loop to print lines with increasing number of stars
for i in {1..4}
do
  # Print stars in each line
  for j in $(seq 1 $i)
  do
    echo -n "*"
  done
  # Print a new line after each set of stars
  echo
done

chmod +x star_pattern.sh

./star_pattern.sh

---------------------------------------------------------------------------------------------------



2	Accept the first name, middle name, and last name of a person in variables fname, mname and lname respectively. Greet the person (take his full name) using appropriate message. 

#!/bin/bash

# Accept first name, middle name, and last name as input
echo "Enter your first name:"
read fname

echo "Enter your middle name:"
read mname

echo "Enter your last name:"
read lname

# Greet the person using their full name
echo "Hello, $fname $mname $lname! Welcome!"

chmod +x greet_person.sh

./greet_person.sh


----------------------------------------------------------------------------------------
3	Display the name of files in the current directory along with the names of files with maximum & minimum size. The file size is considered in bytes.

#!/bin/bash

# List all files in the current directory along with their sizes
echo "Files in the current directory and their sizes in bytes:"
ls -l | awk 'NR>1 {print $9 ": " $5}'

# Find the file with the maximum size
max_file=$(ls -l | awk 'NR>1 {print $5, $9}' | sort -n | tail -1)
max_size=$(echo $max_file | awk '{print $1}')
max_filename=$(echo $max_file | awk '{print $2}')
echo "File with maximum size: $max_filename ($max_size bytes)"

# Find the file with the minimum size
min_file=$(ls -l | awk 'NR>1 {print $5, $9}' | sort -n | head -1)
min_size=$(echo $min_file | awk '{print $1}')
min_filename=$(echo $min_file | awk '{print $2}')
echo "File with minimum size: $min_filename ($min_size bytes)"


chmod +x file_size_info.sh
./file_size_info.sh
--------------------------------------------------------------------------------------------



4	Write a script which when executed checks out whether it is a working day or not?
(Note: Working day Mon-Fri)

#!/bin/bash

# Get the current day of the week
day=$(date +%A)

# Check if the day is a working day (Monday to Friday)
if [[ "$day" == "Monday" || "$day" == "Tuesday" || "$day" == "Wednesday" || "$day" == "Thursday" || "$day" == "Friday" ]]; then
  echo "Today is a working day: $day."
else
  echo "Today is not a working day: $day."
fi

chmod +x check_working_day.sh

./check_working_day.sh
--------------------------------------------------------------------------------------------------
5	Write a script that accepts a member into MBT health club, if the weight of the person is withing the range of 30-250 Kgs.

#!/bin/bash

# Prompt the user to enter their weight
echo "Please enter your weight in kilograms (kg):"
read weight

# Check if the input is a valid number and within the acceptable range
if [[ "$weight" =~ ^[0-9]+$ ]] && [ "$weight" -ge 30 ] && [ "$weight" -le 250 ]; then
  echo "You have been accepted into the MBT Health Club!"
else
  echo "Sorry, you are not eligible for membership. Your weight must be between 30 and 250 kilograms."
fi

--------------------------------------------------------------------------------------------------------------------------
6	Write a shell script that greets the user with an appropriate message depending on the system time.

#!/bin/bash

# Get the current hour of the day (24-hour format)
hour=$(date +%H)

# Determine the appropriate greeting based on the time of day
if [ "$hour" -ge 5 ] && [ "$hour" -lt 12 ]; then
  echo "Good morning!"
elif [ "$hour" -ge 12 ] && [ "$hour" -lt 17 ]; then
  echo "Good afternoon!"
elif [ "$hour" -ge 17 ] && [ "$hour" -lt 21 ]; then
  echo "Good evening!"
else
  echo "Good night!"
fi

chmod +x greet_user.sh

./greet_user.sh

---------------------------------------------------------------------------------------------------
7	A data file file has some student records including rollno, names and subject marks. The fields are separated by a “:”. Write a shell script that accepts roll number from the user, searches it in the file and if the roll number is present - allows the user to modify name and marks in 3 subjects. 
If the roll number is not present, display a message “Roll No Not Found”. Allow the user to modify one record at a time. 

101:John Doe:80:75:90
102:Jane Smith:85:88:92
103:Alice Brown:78:82:84

#!/bin/bash

# Ask for the roll number to modify
echo "Enter the roll number to modify:"
read rollno

# Check if the roll number exists in the file
record=$(grep "^$rollno:" file)

if [ -z "$record" ]; then
  # If record is not found, print the message
  echo "Roll No Not Found"
else
  # If record is found, extract current details
  echo "Record found: $record"
  
  # Split the record into fields
  IFS=":" read -r roll name marks1 marks2 marks3 <<< "$record"
  
  # Ask for new name and marks for the subjects
  echo "Current Name: $name"
  echo "Enter new name (leave empty to keep current):"
  read new_name
  if [ -n "$new_name" ]; then
    name="$new_name"
  fi
  
  echo "Current Marks: $marks1 $marks2 $marks3"
  echo "Enter new marks for subject 1 (leave empty to keep current):"
  read new_marks1
  if [ -n "$new_marks1" ]; then
    marks1="$new_marks1"
  fi
  
  echo "Enter new marks for subject 2 (leave empty to keep current):"
  read new_marks2
  if [ -n "$new_marks2" ]; then
    marks2="$new_marks2"
  fi
  
  echo "Enter new marks for subject 3 (leave empty to keep current):"
  read new_marks3
  if [ -n "$new_marks3" ]; then
    marks3="$new_marks3"
  fi
  
  # Update the record in the file by creating a temporary file
  sed -i "/^$rollno:/c\\$rollno:$name:$marks1:$marks2:$marks3" file
  
  # Notify the user about the changes
  echo "Record updated successfully."
fi

./modify_student.sh

Enter the roll number to modify:
102
Record found: 102:Jane Smith:85:88:92
Current Name: Jane Smith
Enter new name (leave empty to keep current): Jane Johnson
Current Marks: 85 88 92
Enter new marks for subject 1 (leave empty to keep current): 90
Enter new marks for subject 2 (leave empty to keep current): 
Enter new marks for subject 3 (leave empty to keep current): 
Record updated successfully.

101:John Doe:80:75:90
102:Jane Johnson:90:88:92
103:Alice Brown:78:82:84
------------------------------------------------------------------------------------------------------
8	Modify program 7 to accept the RollNo from the command line.
#!/bin/bash

# Check if a roll number was provided as a command line argument
if [ -z "$1" ]; then
  echo "Error: No roll number provided."
  echo "Usage: $0 <RollNumber>"
  exit 1
fi

# Get the roll number from the command line argument
rollno=$1

# Check if the roll number exists in the file
record=$(grep "^$rollno:" file)

if [ -z "$record" ]; then
  # If record is not found, print the message
  echo "Roll No Not Found"
else
  # If record is found, extract current details
  echo "Record found: $record"
  
  # Split the record into fields
  IFS=":" read -r roll name marks1 marks2 marks3 <<< "$record"
  
  # Ask for new name and marks for the subjects
  echo "Current Name: $name"
  echo "Enter new name (leave empty to keep current):"
  read new_name
  if [ -n "$new_name" ]; then
    name="$new_name"
  fi
  
  echo "Current Marks: $marks1 $marks2 $marks3"
  echo "Enter new marks for subject 1 (leave empty to keep current):"
  read new_marks1
  if [ -n "$new_marks1" ]; then
    marks1="$new_marks1"
  fi
  
  echo "Enter new marks for subject 2 (leave empty to keep current):"
  read new_marks2
  if [ -n "$new_marks2" ]; then
    marks2="$new_marks2"
  fi
  
  echo "Enter new marks for subject 3 (leave empty to keep current):"
  read new_marks3
  if [ -n "$new_marks3" ]; then
    marks3="$new_marks3"
  fi
  
  # Update the record in the file by creating a temporary file
  sed -i "/^$rollno:/c\\$rollno:$name:$marks1:$marks2:$marks3" file
  
  # Notify the user about the changes
  echo "Record updated successfully."
fi

9	Modify the program 7 to accept the RollNo and display the record and ask for delete confirmation. Once confirmed delete the record and update the data file.
#!/bin/bash

# Check if a roll number was provided as a command line argument
if [ -z "$1" ]; then
  echo "Error: No roll number provided."
  echo "Usage: $0 <RollNumber>"
  exit 1
fi

# Get the roll number from the command line argument
rollno=$1

# Check if the roll number exists in the file
record=$(grep "^$rollno:" file)

if [ -z "$record" ]; then
  # If record is not found, print the message
  echo "Roll No Not Found"
else
  # If record is found, display the record
  echo "Record found: $record"
  
  # Ask for delete confirmation
  echo "Do you want to delete this record? (yes/no)"
  read confirmation
  
  # If confirmed, delete the record from the file
  if [ "$confirmation" == "yes" ]; then
    # Delete the record using sed and update the file
    sed -i "/^$rollno:/d" file
    echo "Record with Roll No $rollno has been deleted successfully."
  else
    echo "Deletion canceled. No changes made."
  fi
fi

chmod +x delete_student.sh
./delete_student.sh 102
---------------------------------------------------------------------------------------------------------------------------
10	Write a script that takes a command line argument and reports on its file type (regular file, directory file, etc.). For more than one argument generate error message.  

#!/bin/bash

# Check if exactly one argument is provided
if [ "$#" -ne 1 ]; then
  echo "Error: You must provide exactly one file or directory as an argument."
  exit 1
fi

# Get the file or directory path from the command-line argument
input=$1

# Check if the input is a regular file
if [ -f "$input" ]; then
  echo "$input is a regular file."
# Check if the input is a directory
elif [ -d "$input" ]; then
  echo "$input is a directory."
# Check if the input is a symbolic link
elif [ -L "$input" ]; then
  echo "$input is a symbolic link."
# Check if the input is a block device
elif [ -b "$input" ]; then
  echo "$input is a block device."
# Check if the input is a character device
elif [ -c "$input" ]; then
  echo "$input is a character device."
# Check if the input is a named pipe
elif [ -p "$input" ]; then
  echo "$input is a named pipe (FIFO)."
# Check if the input is a socket
elif [ -S "$input" ]; then
  echo "$input is a socket."
else
  echo "$input is an unknown type or does not exist."
fi

chmod +x check_file_type.sh
./check_file_type.sh /path/to/your/file
-----------------------------------------------------------------------------------------------------------------------------------



11	Add some student records in the “student” file manually. The fields to be considered are “RollNo”, “Name”, “Marks_Hindi”, “Marks_Maths”, “Marks_Physics”.
 Write a script which does the following 
a	If the roll number already exists, then store the record and the following message 
“roll number exists” in a log file “log1”.
b	If the marks in the subjects is not in the range of 1 – 99 then store such a record followed by a message “marks out of range” in “log1”
c	If the data is valid, the calculate total, percentage, grade and display on the terminal

#!/bin/bash

# Define the file where student records are stored
STUDENT_FILE="student"
LOG_FILE="log1"

# Prompt user to enter student details
echo "Enter RollNo:"
read rollno
echo "Enter Name:"
read name
echo "Enter Marks in Hindi:"
read marks_hindi
echo "Enter Marks in Maths:"
read marks_maths
echo "Enter Marks in Physics:"
read marks_physics

# Check if roll number already exists in the student file
if grep -q "^$rollno" "$STUDENT_FILE"; then
    # If roll number exists, log the record and message
    echo "$rollno|$name|$marks_hindi|$marks_maths|$marks_physics" >> "$LOG_FILE"
    echo "Roll number exists" >> "$LOG_FILE"
    echo "Roll number exists"
else
    # Validate marks range (1 to 99)
    if [ "$marks_hindi" -lt 1 ] || [ "$marks_hindi" -gt 99 ] || [ "$marks_maths" -lt 1 ] || [ "$marks_maths" -gt 99 ] || [ "$marks_physics" -lt 1 ] || [ "$marks_physics" -gt 99 ]; then
        # If marks are out of range, log the record and message
        echo "$rollno|$name|$marks_hindi|$marks_maths|$marks_physics" >> "$LOG_FILE"
        echo "Marks out of range" >> "$LOG_FILE"
        echo "Marks out of range"
    else
        # Calculate total marks, percentage, and grade
        total=$((marks_hindi + marks_maths + marks_physics))
        percentage=$(echo "scale=2; $total / 3" | bc)
        
        # Determine grade
        if (( $(echo "$percentage >= 80" | bc -l) )); then
            grade="A"
        elif (( $(echo "$percentage >= 60" | bc -l) )); then
            grade="B"
        elif (( $(echo "$percentage >= 40" | bc -l) )); then
            grade="C"
        else
            grade="F"
        fi
        
        # Add valid record to student file
        echo "$rollno|$name|$marks_hindi|$marks_maths|$marks_physics" >> "$STUDENT_FILE"
        
        # Display total, percentage, and grade
        echo "Total Marks: $total"
        echo "Percentage: $percentage%"
        echo "Grade: $grade"
    fi
fi

$ ./student_script.sh
Enter RollNo:
1122
Enter Name:
John Doe
Enter Marks in Hindi:
85
Enter Marks in Maths:
90
Enter Marks in Physics:
88

1122|John Doe|85|90|88
Marks out of range




---------------------------------------------------------------------------------------------------------------------------------------



12	Create a data file “master” and enter some records manually. The record comprises of batch code, faculty name and number of students. Keep number of students as 0 initially.

Write a script that accepts the batch code and searches it “master” file. 
 If it is present, then allow the user to enter any number of records in a file with the name same as the batch code itself.
These records should have the fields RollNo, Name and Marks in Hindi, Maths and Physics. 
Keep updating the number of students field in “master” file.

BatchCode:FacultyName:NumberOfStudents

#!/bin/bash

# File locations
master_file="master"

# Function to update the number of students in the master file
update_master() {
  batch_code=$1
  num_students=$2
  sed -i "s/^$batch_code:[^:]*:[^:]*$/$batch_code:$faculty_name:$num_students/" "$master_file"
}

# Function to add student records to the batch file
add_student_records() {
  batch_code=$1
  num_students=$2
  
  # Ask for the number of records to enter
  echo "How many student records do you want to add?"
  read num_records
  
  # Loop to input student records
  for ((i=1; i<=num_records; i++))
  do
    echo "Enter Roll No:"
    read rollno
    echo "Enter Name:"
    read name
    echo "Enter Marks in Hindi:"
    read marks_hindi
    echo "Enter Marks in Maths:"
    read marks_maths
    echo "Enter Marks in Physics:"
    read marks_physics

    # Store the record in the batch file
    echo "$rollno:$name:$marks_hindi:$marks_maths:$marks_physics" >> "$batch_code"
  done
  
  # Update the number of students
  new_num_students=$((num_students + num_records))
  update_master "$batch_code" "$new_num_students"
}

# Ask for the batch code
echo "Enter Batch Code:"
read batch_code

# Check if the batch code exists in the master file
if grep -q "^$batch_code:" "$master_file"; then
  # Batch code exists, fetch the current number of students and faculty name
  batch_record=$(grep "^$batch_code:" "$master_file")
  faculty_name=$(echo "$batch_record" | cut -d ':' -f2)
  num_students=$(echo "$batch_record" | cut -d ':' -f3)

  # Display batch details
  echo "Batch Code: $batch_code"
  echo "Faculty: $faculty_name"
  echo "Number of Students: $num_students"

  # Allow user to add student records
  add_student_records "$batch_code" "$num_students"
else
  # Batch code does not exist
  echo "Batch Code not found in master file."
fi

B001:Dr. Smith:0
B002:Prof. Johnson:0

./add_batch_students.sh

Enter Batch Code:
B001

Batch Code: B001
Faculty: Dr. Smith
Number of Students: 0

How many student records do you want to add?
2

101:John Doe:75:85:90
102:Jane Doe:80:88:92

B001:Dr. Smith:2
B002:Prof. Johnson:0




---------------------------------------------------------------------------------------------------------------------------------------------------
13	Create a library of shell functions to do the followings:
Function to concatenate 2 strings. Pass 2 strings as parameters to function.
Function to find out the length of a given string, Pass string as a parameter to function.
Function to compare the two strings. Pass 2 strings as parameters to function.
Function to check if string is palindrome or not. Pass string as a parameter to function.
Function to print given string in reverse order. Pass string as a parameter to function.

#!/bin/bash

# Function to concatenate two strings
concatenate_strings() {
  str1=$1
  str2=$2
  result="$str1$str2"
  echo "$result"
}

# Function to find the length of a string
string_length() {
  str=$1
  length=${#str}
  echo "$length"
}

# Function to compare two strings
compare_strings() {
  str1=$1
  str2=$2
  if [ "$str1" == "$str2" ]; then
    echo "The strings are equal."
  else
    echo "The strings are not equal."
  fi
}

# Function to check if a string is a palindrome
check_palindrome() {
  str=$1
  reversed_str=$(echo "$str" | rev)
  if [ "$str" == "$reversed_str" ]; then
    echo "The string is a palindrome."
  else
    echo "The string is not a palindrome."
  fi
}

# Function to print the string in reverse order
reverse_string() {
  str=$1
  reversed_str=$(echo "$str" | rev)
  echo "$reversed_str"
}

concatenate_strings "Hello, " "World!"
string_length "Hello"
compare_strings "Hello" "hello"
check_palindrome "madam"
check_palindrome "hello"
reverse_string "Hello"

source string_functions.sh



--------------------------------------------------------------------------------------------------------------------------------------------------------------------

14	Assignemnts on “sed” command
      
      EmpData(Sample Database)

1122|j.b. saxena           |g.m.        |account   |12/12/52|6000
2233|n.k. gupta            |d.g.m      |sales        |31/12/40|9000
4545|anil agarwal        |director   |account   |06/07/47|7500
5656|lalit choudhury   |executive|marketing|07/09/50|5000
1265|chanchal singhvi|g.m.         |admin      |12/09/63|6000
0110|shyam saksena   |chairman |marketing|12/12/43|8000
5566|jai sharma          |director    |account   |23/12/89|7000
7733|jayant                 |d.g.m       |sales        |29/02/70|6000


a	From the above database substitute the delimiter of first 3 lines with “ : “
b	From the above database substitute the delimiter with “ : ”
c	Insert the string “ TechM Employees” in the first line.
d	Store the lines pertaining to the directors, d.g.m and g.m into three separate files.
e	Using address store first 4 lines into a file Empupdate.
f	Find the pattern “account” in the database and replaces that with “accounts”.
g	Select those lines which do not have a pattern “g.m”.
h	Insert a blank line after every line in the database.

1122|j.b. saxena           |g.m.        |account   |12/12/52|6000
2233|n.k. gupta            |d.g.m      |sales        |31/12/40|9000
4545|anil agarwal        |director   |account   |06/07/47|7500
5656|lalit choudhury   |executive|marketing|07/09/50|5000
1265|chanchal singhvi|g.m.         |admin      |12/09/63|6000
0110|shyam saksena   |chairman |marketing|12/12/43|8000
5566|jai sharma          |director    |account   |23/12/89|7000
7733|jayant                 |d.g.m       |sales        |29/02/70|6000


a) sed '1,3s/|/:/g' EmpData
b) sed 's/|/:/g' EmpData
c> sed '1i TechM Employees' EmpData
d>  # Extract lines with 'director' and store in a file
sed -n '/director/p' EmpData > director.txt

# Extract lines with 'd.g.m' and store in a file
sed -n '/d.g.m/p' EmpData > dg_m.txt

# Extract lines with 'g.m.' and store in a file
sed -n '/g.m/p' EmpData > gm.txt

e> sed '1,4p' EmpData > Empupdate
f> sed 's/account/accounts/g' EmpData
g> sed '/g.m/!p' EmpData
h> sed 'a\' EmpData


examples-->
a>sed '1,3s/|/:/g' EmpData

b>sed 's/|/:/g' EmpData

c>sed '1i TechM Employees' EmpData

d>sed -n '/director/p' EmpData > director.txt
sed -n '/d.g.m/p' EmpData > dg_m.txt
sed -n '/g.m/p' EmpData > gm.txt

e> sed '1,4p' EmpData > Empupdate

f>sed 's/account/accounts/g' EmpData

g>sed '/g.m/!p' EmpData

h> sed 'a\' EmpData











